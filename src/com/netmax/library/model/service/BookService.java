package com.netmax.library.model.service;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.netmax.library.common.AppConfig;
import com.netmax.library.model.AppMystore;
import com.netmax.library.model.BBook;
import com.netmax.library.model.BBookpic;
import com.netmax.library.model.BPrelend;
import com.netmax.library.model.BReader;
import com.netmax.library.model.BStatus;
import com.netmax.library.model.base.BaseBBook;
import com.netmax.library.model.base.BaseBBookpic;
import com.netmax.library.model.tools.JsonFormat;

/**
 * Generated by JFinal.
 */

public class BookService{	
	//最新图书
	public static List getNewBooks(){
		String sql="select s_id,s_name from web_school";
		List<Record> list_sch=Db.find(sql);
		
		List<BBook> list= BBook.dao.find("select top 10 * from b_book order by r_date desc");
		List result=new ArrayList();
		for(BBook book : list){
			HashMap map=new HashMap();
			map.put("bookId", book.getBNo());
			map.put("frame", book.getBFrame());
			map.put("bookName", book.getBTitle());
			map.put("author", book.getBDutyer());
			map.put("publisher", book.getPubMan());
			map.put("theDate", book.getPubDate());
			if(book.getBPicture()==null || "".equals(book.getBPicture())){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getBPicture());
			}
			
			//copy and sname
			HashMap mapCopy=getCopy(book.getBNo()+"");
			map.put("shu1", mapCopy.get("shu1"));
			map.put("shu2",mapCopy.get("shu2"));
			for(Record rs2 : list_sch){
				if(book.getSId().equals(rs2.getStr("s_id"))){
					map.put("sname", rs2.getStr("s_name"));
					break;
				}
			}	
			map.put("isbn", book.getBIsbn());
			result.add(map);
		}
		return result;
	}
	
	//推荐图书
	public static List tuijianBooks(){
		String sql="select s_id,s_name from web_school";
		List<Record> list_sch=Db.find(sql);
		
		List<Record> list=Db.find("select top 10 b.* from s_tj s left join b_book b on b.b_no=s.b_no order by s.createdate desc");
		List result=new ArrayList();
		for(Record book : list){
			HashMap map=new HashMap();
			map.put("bookId", book.getBigDecimal("b_no"));
			map.put("bookName", book.getStr("b_title"));
			map.put("frame", book.getStr("b_frame"));
			map.put("author", book.getStr("b_dutyer"));
			map.put("publisher", book.getStr("pub_man"));
			map.put("theDate", book.getStr("pub_date"));
			if(book.getStr("b_picture")==null || "".equals(book.getStr("b_picture"))){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getStr("b_picture"));
			}
			
			//copy and sname
			HashMap mapCopy=getCopy(book.getBigDecimal("b_no")+"");
			map.put("shu1", mapCopy.get("shu1"));
			map.put("shu2",mapCopy.get("shu2"));
			for(Record rs2 : list_sch){
				if(book.getStr("S_ID").equals(rs2.getStr("s_id"))){
					map.put("sname", rs2.getStr("s_name"));
					break;
				}
			}	
			
			map.put("isbn", book.getStr("b_isbn"));
			result.add(map);
		}
		return result;
	}
	
	//热门图书
	public static List hotBooks(){
		String sql1="select s_id,s_name from web_school";
		List<Record> list_sch=Db.find(sql1);
		
		String sql="SELECT top 10 a.*, isnull(b.pub_name, a.pub_man) pub_name, isnull(c.NAME, a.b_lang) lang_name "+
                   " FROM (SELECT bk.b_no,bk.s_id,bk.b_frame, bk.b_title, bk.b_dutyer, bk.pub_man, bk.pub_city, bk.b_page, " +
                   " bk.b_size, bk.b_price, bk.b_bind, bk.b_lang, bk.pub_date,bk.b_picture, COUNT(*) AS jssl "+
                   " FROM b_lend bl, b_status bs, b_book bk "+
                   " WHERE (bs.b_no = bk.b_no) "+
                   " AND (bl.b_bar = bs.b_barid) "+
                   " GROUP BY bk.b_no,bk.s_id, bk.b_frame, bk.b_title, bk.b_dutyer, bk.pub_man, bk.pub_city, "+
                   " bk.b_page, bk.b_size, bk.b_price, bk.b_bind, bk.b_lang, bk.pub_date,bk.b_picture) a "+
                   " LEFT OUTER JOIN b_publisher b ON a.pub_man = b.pub_isbn "+
                   " LEFT OUTER JOIN dm_lang c ON a.b_lang = c.code "+
                   " ORDER BY jssl DESC"; 
		List<Record> list=Db.find(sql);
		
		List result=new ArrayList();
		for(Record book : list){
			HashMap map=new HashMap();
			map.put("bookId", book.getBigDecimal("b_no"));
			map.put("bookName", book.getStr("b_title"));
			map.put("frame", book.getStr("b_frame"));
			map.put("author", book.getStr("b_dutyer"));
			map.put("publisher", book.getStr("pub_man"));
			map.put("theDate", book.getStr("pub_date"));
			if(book.getStr("b_picture")==null || "".equals(book.getStr("b_picture"))){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getStr("b_picture"));
			}
			
			//copy and sname
			HashMap mapCopy=getCopy(book.getBigDecimal("b_no")+"");
			map.put("shu1", mapCopy.get("shu1"));
			map.put("shu2",mapCopy.get("shu2"));
			for(Record rs2 : list_sch){
				if(book.getStr("s_id").equals(rs2.getStr("s_id"))){
					map.put("sname", rs2.getStr("s_name"));
					break;
				}
			}
			
			map.put("isbn", book.getStr("b_isbn"));
			result.add(map);
		}
		return result;
	}
	
	private static HashMap getCopy(String bno){
		HashMap result=new HashMap();
		String sql_count="select sum(case when (b_status='在架') then 1 else 0 end) as shu1,COUNT(*) as shu2  from b_status  where b_no="+bno;
		Record rs1=Db.findFirst(sql_count);
		result.put("shu1", rs1.getInt("shu1"));
		result.put("shu2", rs1.getInt("shu2"));
		return result;
	}
	
	//图书详情
	public static HashMap getBookDetail(String bookId){
		HashMap result = new HashMap();
		BBook book= BBook.dao.findById(bookId);
		HashMap map=new HashMap();
		if(book!=null){
			map.put("bookName", book.getBTitle());
			map.put("publisher", book.getPubMan());
			map.put("pubDate", book.getPubDate());
			map.put("author", book.getBDutyer());
			map.put("price", book.getBPrice());
			map.put("note", book.getBIndex());
			map.put("bookId", bookId);
			map.put("sid", book.getSId());
			map.put("frame", book.getBFrame());
			
			
			
			if(book.getBPicture()==null || "".equals(book.getBPicture())){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getBPicture());
			}
			
			//map.put("pic", bookId);  //用bookId替换
			//图书所在分管
			String sql1="select s_name from web_school where s_id=?";
            Record rs1=Db.findFirst(sql1,book.getSId());
            if(rs1!=null){
            	String sname=rs1.getStr("s_name");
            	map.put("sname", sname);
            }else{
            	map.put("sname",book.getSId());            	
            }
			
			//图书副本借出情况
			String hasBook="F";
			//String sql="select count(*) as shu from b_status where b_status='在架' and  b_no='"+bookId+"' ";
			String sql="select sum(case when (b_status='在架') then 1 else 0 end) as shu1,COUNT(*) as shu2  from b_status  where b_no="+bookId;
			List<Record> list=Db.find(sql);
			if(list!=null && list.size()>0){
				Record rs=list.get(0);
				if (rs.getInt("shu1")>0){
					hasBook="T";
				}
				
				map.put("shu1", rs.getInt("shu1"));
				map.put("shu2", rs.getInt("shu2"));
			}
			map.put("hasBook", hasBook);
			
			//查询复本状态
			sql = "select count(*) as allshu , s1.s_name as sname,sum(case when b.b_status='借出' then 1 else 0 END)  as lendshu  from b_status b " +
				  " left join WEB_SCHOOL s1 on s1.S_ID=b.cur_sid " +
                  " where b.b_no=? group by s1.s_name";
			List libList = Db.find(sql,bookId);
			result.put("libList", libList);
		}
		
		result.put("bookInfo", map);
		return result;
	}
	
	//图书图片
	public static byte[] getBookPic(String bookId){
		String sql="select * from b_bookpic where b_no=?";
		BaseBBookpic pic=BBookpic.dao.findFirst(sql,bookId);
		if(pic==null){
			return null;
		}else{
			return pic.getBPic();
		}
	}
	
	//按书名查询，分页
	public List<HashMap> searchByBookName(String keyWord,int thePage){
		Page<BBook> page=BBook.dao.paginate(thePage, 10, "select * ", "from b_book where b_title like ?","%"+keyWord+"%");
		List<HashMap> resultList=new ArrayList();
		
		List<BBook> books=page.getList();
		for(BBook book : books){
			HashMap map=new HashMap();
			map.put("bookId", book.getBNo());
			map.put("bookName", book.getBTitle());
			map.put("author", book.getBDutyer());
			map.put("publisher", book.getPubMan());
			map.put("theDate", book.getPubDate());
			if(book.getBPicture()==null || "".equals(book.getBPicture())){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getBPicture());
			}
			
			map.put("isbn", book.getBIsbn());
			resultList.add(map);
		}
		return resultList;
	}
	
	
	//按作者检索，分页
	public List<HashMap> searchByAuthor(String keyWord,int thePage){
		Page<BBook> page=BBook.dao.paginate(thePage, 10, "select * ", "from b_book where b_dutyer like ? or b_dutyerPy like ?","%"+keyWord+"%","%"+keyWord+"%");
		List<HashMap> resultList=new ArrayList();
		
		List<BBook> books=page.getList();
		for(BBook book : books){
			HashMap map=new HashMap();
			map.put("bookId", book.getBNo());
			map.put("bookName", book.getBTitle());
			map.put("author", book.getBDutyer());
			map.put("publisher", book.getPubMan());
			map.put("theDate", book.getPubDate());
			if(book.getBPicture()==null || "".equals(book.getBPicture())){
				map.put("pic", "img/book.png");
			}else{
				map.put("pic", book.getBPicture());
			}
			
			map.put("isbn", book.getBIsbn());
			resultList.add(map);
		}
		return resultList;
	}
	
	//按出版社检索，分页
		public List<HashMap> searchByPublisher(String keyWord,int thePage){
			Page<BBook> page=BBook.dao.paginate(thePage, 10, "select * ", "from b_book where pub_man like ?","%"+keyWord+"%");
			List<HashMap> resultList=new ArrayList();
			
			List<BBook> books=page.getList();
			for(BBook book : books){
				HashMap map=new HashMap();
				map.put("bookId", book.getBNo());
				map.put("bookName", book.getBTitle());
				map.put("author", book.getBDutyer());
				map.put("publisher", book.getPubMan());
				map.put("theDate", book.getPubDate());
				if(book.getBPicture()==null || "".equals(book.getBPicture())){
					map.put("pic", "img/book.png");
				}else{
					map.put("pic", book.getBPicture());
				}
				
				map.put("isbn", book.getBIsbn());
				resultList.add(map);
			}
			return resultList;
		}
		
		//按出版社检索，分页
		public List<HashMap> searchByIsbn(String keyWord,int thePage){
			Page<BBook> page=BBook.dao.paginate(thePage, 10, "select * ", "from b_book where b_isbn like ?","%"+keyWord+"%");
			List<HashMap> resultList=new ArrayList();
			
			List<BBook> books=page.getList();
			for(BBook book : books){
				HashMap map=new HashMap();
				map.put("bookId", book.getBNo());
				map.put("bookName", book.getBTitle());
				map.put("author", book.getBDutyer());
				map.put("publisher", book.getPubMan());
				map.put("theDate", book.getPubDate());
				if(book.getBPicture()==null || "".equals(book.getBPicture())){
					map.put("pic", "img/book.png");
				}else{
					map.put("pic", book.getBPicture());
				}
				
				map.put("isbn", book.getBIsbn());
				resultList.add(map);
			}
			return resultList;
		}
		
		/**
		 * 处理预借，逻辑参考asp
		 * @param bookId
		 * @return
		 */
		public static HashMap prelend(String bookId,String userCode){
			HashMap result=new HashMap();
			
			int eff_days=AppConfig.EFF_DAYS; 
			//判断已借数量是否小于可借数量，如大于等于可借数量不能借书
			String sql="SELECT count(*) as shu  FROM b_lend WHERE (read_card = '" + userCode + "')   AND (back_date IS NULL)";
			Integer shu1=Db.queryInt(sql);
			
			sql="select count(*) as shu from b_prelend where lend_card='" +userCode+ "' and tag='1' and state='预借' ";
			Integer shu2=Db.queryInt(sql);
			
			sql="select * from b_reader where read_card='" +userCode+ "' ";
			List<Record> tmp=Db.find(sql);
			BigDecimal canLend=tmp.get(0).getBigDecimal("can_lend");
			String b_kind=tmp.get(0).getStr("read_kind");            //读者类型
			
			sql="select * from b_book where b_no='" +bookId+"' ";
			List<Record> list=Db.find(sql);
			String bookKind=list.get(0).getStr("b_kind");
			bookKind=bookKind.substring(0,1);
			
			if(compareTo(canLend,shu1+shu2)<=0){
				result.put("state", "error");
				result.put("message", "您已借和预借图书总和已超过最大可借数量(" +canLend+ ")，不可再预借！");
				return result;
			}
			
			//判断该读者能否再借此类型的书
			sql="SELECT COUNT(1) as shu FROM b_lend WHERE read_card ='"+userCode+ "'  AND substring(b_kind, 1, 1) ='" +bookKind+ "' AND back_date IS NULL";
			Integer shu3=Db.queryInt(sql);
			
			sql="SELECT lend_num FROM b_lendpara WHERE read_kind ='" + b_kind + "' AND book_kind ='" +bookKind+ "' ";
			BigDecimal shu4=Db.queryBigDecimal(sql);
			if(shu4==null){
				shu4=BigDecimal.ZERO;
			}
			if(compareTo(shu3,shu4)>=0){
			    //if(shu3>=shu4){
				result.put("state", "error");
				result.put("message", "对不起，" + bookKind +"类图书借书数量不能超过"+shu4+ "本')");
				return result;
			}
			
			//'判断超期是否还能借书，2个输入参数为读者证号和读者类型
			sql="select dbo.f_check_read('" + userCode + "','" + b_kind + "') as shu";
			Integer shu5=Db.queryInt(sql);
			if(shu5==null){
				shu5=Integer.parseInt("0");
			}
			
			if(shu5>0){
				result.put("state", "error");
				result.put("message", "对不起，此借书证下已有借书超期未归还，不能再继续借书！");
				return result;
			}
			
			//'判断读者类型馆藏地，2个输入参数为图书条码和读者类型
			sql="SELECT COUNT(1) as shu FROM b_status WHERE b_no='" +bookId+"'  AND b_addr IN (SELECT read_addr FROM b_readaddr WHERE read_kind ='" + b_kind + "')";
			System.out.println(sql);
			Integer shu6=Db.queryInt(sql);
			if(shu6==0){
				result.put("state", "error");
				result.put("message", "对不起，没有授权，不允许预借！");
				return result;
			}
			
			//'判断条码是否状态b_status.b_status='在架
			sql="select count(*) as shu from b_status where b_no='" +bookId+ "' and b_status='在架'";
			Integer shu7=Db.queryInt(sql);
			if(shu7<=0){
				result.put("state", "error");
				result.put("message", "图书没有在架，不可借出！");
				return result;
			}
			
			//'是否已经预借此种书籍，如已预借，则不重复
			sql="select count(*) as shu from b_prelend where b_bar in(select b_barid from b_status where b_no=" +bookId+ ") and tag=1 and lend_card='"  +userCode+ "' and state='预借'";
			Integer shu8=Db.queryInt(sql);
			if(shu8>0){
				result.put("state", "error");
				result.put("message", "您已预借此类图书，不可重复预借！");
				return result;
			}
			
			//'此类书籍中是否有状态为在架的书，如有，则加入预借列表，并且，状态置为预借，给预借表中插入数据
			sql="select * from b_status where b_status='在架' and b_no=" +bookId;
			List<BStatus> status=BStatus.dao.find(sql);
			for(BStatus rs : status){
				String b_barid=rs.getBBarid();
				rs.setBStatus("预借");
				rs.update();
				sql = "insert b_prelend (lend_card,b_bar,prelend_date,tag,eff_date,state) values ('" + userCode + "','" + b_barid  + "', getdate(),1,getdate()+" + eff_days + ",'预借')";
			    Db.update(sql);
			    result.put("state", "ok");
				result.put("message", "图书预借成功！");
				return result;
			}
					
			//'如有状态为预借的，则按最早失效日期为该读者借书，并插入预借表 倒排序
			sql="select * from b_prelend where b_bar in (select b_barid from b_status where b_status='预借' and b_no=" +bookId+ ")  order by prelend_date desc";
			BPrelend prelend=BPrelend.dao.findFirst(sql);
			if(prelend==null){
				result.put("state", "error");
				result.put("message", "没有可预借的图书，无法预借");
				return result;
			}else{
				java.util.Date eff_date=prelend.getEffDate();
				String b_bar=prelend.getBBar();
				java.util.Date now=new java.util.Date();
				if(now.getTime()>eff_date.getTime()){
					eff_date=now;
				}
				
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				String eff_date_str=df.format(eff_date);
				
				java.util.Date date1=new java.util.Date(eff_date.getTime()+eff_days*24*60*60*1000);
				String date1_str=df.format(date1);
				
				sql = "insert b_prelend (lend_card,b_bar,prelend_date,tag,eff_date,state) values ('" + userCode + "','" + b_bar  + "', '" + eff_date + "',1,'" + date1_str +   "','预借')";
				Db.update(sql);
				
				result.put("state", "error");
				result.put("message", "图书预借成功！");
				return result;
			}
			
			
		}
		
		/**
		 * 取消预借
		 * @param bookId
		 * @param userCode
		 * @return
		 */
		public static HashMap canclePrelend(String b_no,String bookId,String userCode){
			HashMap result=new HashMap();
			//'查询图书的bno
			String sql="select b_no from b_status  where b_barid='"+b_no+"' ";
			BStatus status=BStatus.dao.findFirst(sql);
			
			//'先删除记录
			sql="delete b_prelend where b_id =" + b_no +" and lend_card='"+userCode+"' and state='预借'";
			System.out.println(sql);
			Db.update(sql);
			
			//'如果没有其它有效预借，则把状态置为在架
			sql="select count(*) as shu from b_prelend where b_bar='"+bookId+"' and eff_date>getdate() and b_id<>"+b_no+" and state='预借'"	;
			int shu=Db.queryInt(sql);
			if(shu==0){
				sql="update b_status set b_status ='在架' where b_barid='" + bookId +"'";
				Db.update(sql);
				
				result.put("state", "ok");
				result.put("message", "预借取消成功！");
				return result;
			}
			
			//'如果没有其它有效“预约”，则把状态置为在架
			sql="select count(*) as shu from b_prelend where b_no="+b_no+" and state='预借' and eff_date>getdate() ";
			int shu1=Db.queryInt(sql);
			if(shu1<=0){
				sql="update b_status set b_status ='在架' where b_barid='" + bookId +"'";
				Db.update(sql);
				result.put("state", "ok");
				result.put("message", "预借取消成功！");
				return result;
			}else{
				
				//'把预约日期最早的记录改为预借，并有效期从现在开始计算
				//   'eff_days 预借有效天数 在fun.asp里定义
				//  '查预约最早的记录
				sql=    "select * from b_prelend where prelend_date=("
                                              +" select min(prelend_date) from b_prelend where b_no="+b_no+" and eff_date>getdate() and state='预约')";
				BPrelend prelend=BPrelend.dao.findFirst(sql);
				prelend.setBBar(bookId);
				prelend.setState("预借");
				java.util.Date effDate=new java.util.Date();
				effDate=new java.util.Date(effDate.getTime()+AppConfig.EFF_DAYS*24*60*60*1000);
				prelend.setEffDate(effDate);
				prelend.update();
				
				result.put("state", "ok");
				result.put("message", "预借取消成功！");
				return result;
			}

		}
		
		/**
		 * 取消委托预借
		 * @param bookId
		 * @param userCode
		 * @return
		 */
		public static HashMap cancleYuelend(String b_no,String bookId,String userCode){
			HashMap result=new HashMap();
			//'查询图书的bno
			String sql="delete b_prelend where b_id =" + b_no+" and lend_card='"+userCode+"' and state='预约' ";
			System.out.print(sql);
			Db.update(sql);
            result.put("state", "ok");
            result.put("message", "委托取消成功");
            return result;
		}
		
		/**
		 * 处理委托逻辑
		 * @param bookId
		 * @param userCode
		 * @return
		 */
		public static HashMap yueLend(String bookId,String userCode){
			HashMap result=new HashMap();
			
			//检查是否超过预约人数
			String sql="select count(*) as shu from b_prelend where state='预约' and b_no="+bookId;
			int shu1=Db.queryInt(sql);
			if(shu1>=AppConfig.Book_Allow_Num){
				result.put("state", "full");
				result.put("message", "本书预约已满，请选择其它书籍");
				return result;
			}
			
			//'判断已预约图书数量是否超过限制
            //'已预约图书量
			sql="select count(*) as shu from b_prelend where lend_card='" +userCode+ "' and tag='1'  and state='预约' ";
			int shu2=Db.queryInt(sql);
			if(AppConfig.ALLOW_NUM <= shu2){
				result.put("state", "error");
				result.put("message", "预约图书不可超过"+AppConfig.ALLOW_NUM+"本");
				return result; 
			}
			
			//'判断该读者能否再借此类型的书
			//'图书的类型
			sql="select * from b_book where b_no='" +bookId+ "' ";
			BBook book=BBook.dao.findFirst(sql);
			String book_kind=book.getBKind();
			book_kind=book_kind.substring(0,1);  //'图书类型
			
			sql="select * from b_reader where read_card='" +userCode+"' ";
			BReader reader=BReader.dao.findFirst(sql);
			BigDecimal can_lend=reader.getCanLend();  //'借书数量
			String b_kind=reader.getReadKind();       //'读者类型
			
			sql="SELECT COUNT(1) as shu FROM b_lend WHERE read_card ='" +userCode+ "'  AND substring(b_kind, 1, 1) ='"+ book_kind+ "' AND back_date IS NULL";
			int shu3=Db.queryInt(sql); //'借此类图书数量
			
			sql="SELECT lend_num FROM b_lendpara WHERE read_kind ='" + b_kind + "' AND book_kind ='" + book_kind + "' ";
			BigDecimal shu4=Db.queryBigDecimal(sql);  //'读者可借此类图书数量
			if(shu4==null){
				shu4=BigDecimal.ZERO;
			}
			
			if(compareTo(shu3,shu4)>0){
				result.put("state", "error");
				result.put("message", "'对不起，" +book_kind + "类图书借书数量不能超过" +shu4+ "本'");
				return result; 
			}
			
			//'判断超期是否还能借书，2个输入参数为读者证号和读者类型
			sql="select dbo.f_check_read('" +userCode+ "','" + b_kind + "') as shu";
			Integer shu5=Db.queryInt(sql);
			if(shu5==null){
				shu5=0;
			}
			if(shu5>1){
				result.put("state", "error");
				result.put("message", "对不起，此借书证下已有借书超期未归还，不能预约！");
				return result; 
			}
			
			//'判断读者类型馆藏地，2个输入参数为图书条码和读者类型
			sql="SELECT COUNT(1) as shu FROM b_status WHERE b_no='" +bookId+ "'  AND b_addr IN (SELECT read_addr FROM b_readaddr WHERE read_kind ='" + b_kind + "')";
			int shu6=Db.queryInt(sql);
			if(shu6==0){
				result.put("state", "error");
				result.put("message", "对不起，没有授权，不允许借出！");
				return result; 				
			}
			
			//'判断条码是否状态b_status.b_status<>'在架'
			sql="select count(*) as shu from b_status where b_no='" +bookId+ "' and b_status<>'在架'";
			int shu7=Db.queryInt(sql);
			if(shu7 <=0){
				result.put("state", "error");
				result.put("message", "图书在架，请直接预借！");
				return result; 	
			}
			
			//'是否已经预约此种书籍，如已预约，则不重复预约,注意失效日期
			sql="select count(*) as shu from b_prelend where  b_no=" +bookId+ "  and tag=1 and lend_card='"  +userCode+ "' and state='预约' and eff_date>getdate()";
			int shu8=Db.queryInt(sql);
			if(shu8>0){
				result.put("state", "error");
				result.put("message", "您已委托预约此图书，不可重复预约！");
				return result; 	
			}
			
			//'将本书加入预约表中，并设置状态
			sql="insert b_prelend(lend_card,b_no,prelend_date,tag,eff_date,state) values(" + 
			                          "'"+userCode+"',"+bookId+",getdate(),1,getdate()+"+ (AppConfig.YUE_EFF_DAYS)+",'预约')";
			Db.update(sql);
			result.put("state", "ok");
			result.put("message", "图书预约委托成功！");
			return result; 

		}
		
		/**
		 * 我的收藏
		 * @param bookId
		 * @param userCode
		 * @return
		 */
		public static HashMap myStore(String bookId,String userCode){
			HashMap result=new HashMap();
			
			String sql="select count(*) as shu from app_mystore where bookId="+bookId+" and reader_code='"+userCode+"' ";
			int shu=Db.queryInt(sql);
			if(shu<=0){
				AppMystore myStore=new AppMystore();
				myStore.setBookId(BigDecimal.valueOf(Long.parseLong(bookId)));
				myStore.setReaderCode(userCode);
				myStore.save();
			}			
			
			result.put("state", "ok");
			result.put("message", "收藏成功！");
			
			return result;
			
		}
		
		/**
		 * 我的收藏列表
		 * @param userCode
		 * @return
		 */
		public static List myStoreList(String userCode){
			String sql="select b.* from app_mystore s left  join b_book b on s.bookid=b.b_no where s.reader_code=? order by s.id desc ";
			List<BBook> books=BBook.dao.find(sql,userCode);			
			List<HashMap> resultList=new ArrayList();
			for(BBook book : books){
				HashMap map=new HashMap();
				map.put("bookId", book.getBNo());
				map.put("bookName", book.getBTitle());
				map.put("author", book.getBDutyer());
				map.put("publisher", book.getPubMan());
				map.put("theDate", book.getPubDate());
				if(book.getBPicture()==null || "".equals(book.getBPicture())){
					map.put("pic", "img/book.png");
				}else{
					map.put("pic", book.getBPicture());
				}
				
				map.put("isbn", book.getBIsbn());
				resultList.add(map);
			}
			return resultList;
		}
		
		//比较
		public static int compareTo(final BigDecimal a, final int b){
			return a.compareTo(BigDecimal.valueOf(b));
		}
		//比较
		public static int compareTo(final int a,final  BigDecimal b){
			return BigDecimal.valueOf(a).compareTo(b);
		}
		
		/**
		 * 续借
		 * @param userCode
		 * @param bookId
		 * @return
		 */
		public static HashMap xujie(String userCode,String lend_no){
			HashMap result=new HashMap();
			int xj_day=7;
			String sql1="select thevalue from app_config where thekind='all' and thekey='relend_days'";
			Record rs=Db.findFirst(sql1);
			if(rs!=null){
				xj_day=Integer.parseInt(rs.getStr("thevalue"));
			}
			
			String sql="update b_lend set b_relend ='R',must_date=must_date+" + xj_day + "  where lend_no=" + lend_no;
			System.out.println(sql);
			Db.update(sql);
			
			result.put("state", "success");
			result.put("message", "续借成功！");
			return result;
		}
}
